#include     <stdio.h>      /*标准输入输出定义*/
#include     <stdlib.h>     /*标准函数库定义*/
#include     <unistd.h>     /*Unix 标准函数定义*/
#include     <sys/types.h>
#include     <sys/stat.h>
#include     <fcntl.h>      /*文件控制定义*/
#include     <termios.h>    /*PPSIX 终端控制定义*/
#include     <errno.h>      /*错误号定义*/
#include <iostream>

//extern unsigned char DataUse485[5];

//485
static unsigned char auchCRCHi[] = {
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40
} ;
//485
static unsigned char auchCRCLo[] = {
0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
0x40
};
int tty_open485(const char * devname)
{
    int ttyd;
    struct termios ttyopt;

    if (devname == NULL)
    {
        perror("invalid devname!");
        return -EINVAL;
    }
    ttyd = open(devname, O_RDWR | O_NOCTTY | O_NDELAY);
    if (ttyd < 0)
    {
        perror("cannot open serial port!");
        return -EIO;
    }

    fcntl(ttyd, F_SETFL, FNDELAY);

    tcgetattr(ttyd, &ttyopt);
    cfsetispeed(&ttyopt, B9600);						//Set baudrate 9600bps
    cfsetospeed(&ttyopt, B9600);
    ttyopt.c_cflag &= ~PARENB;							//Set parity none, 1 stop bit, 8 data bits
    //ttyopt.c_cflag &= ~PARODD;
    ttyopt.c_cflag &= ~CSTOPB;
    ttyopt.c_cflag &= ~CSIZE;
    ttyopt.c_cflag |= CS8;
    ttyopt.c_iflag &= ~INPCK;
    ttyopt.c_iflag &= ~(ISTRIP | INLCR | IGNCR | ICRNL);
    ttyopt.c_cflag |= (CLOCAL | CREAD);					//Enable reciever and set local mode
    ttyopt.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG);	//Ignore control input
    ttyopt.c_iflag &= ~(IXON | IXOFF | IXANY);			//Disable flow control
    ttyopt.c_oflag &= ~(OPOST | ONLCR | OCRNL);

    tcsetattr(ttyd, TCSANOW, &ttyopt);
    printf("open 485\n");

    return ttyd;
}

//
unsigned short CRC16(unsigned char *puchMsg, unsigned short usDataLen) /* º¯ÊýÒÔ unsigned short ÀàÐÍ·µ»Ø CRC */
{
    unsigned char uchCRCHi = 0xFF; /* CRC µÄ¸ß×Ö½Ú³õÊ¼»¯*/
    unsigned char uchCRCLo = 0xFF; /* CRC µÄµÍ×Ö½Ú³õÊ¼»¯*/
    unsigned uIndex; /* CRC ²éÑ¯±íË÷Òý*/
    while (usDataLen--) /* Íê³ÉÕû¸ö±¨ÎÄ»º³åÇø*/
    {
        uIndex = uchCRCLo ^ *puchMsg++; /* ¼ÆËã CRC */
        uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
        uchCRCHi = auchCRCLo[uIndex];
    }
    return (uchCRCHi << 8 | uchCRCLo);
}
void Data485_Saving(const int tty485,unsigned char device_address,unsigned char DataUse485[5])
{
    int i, j;
    static int Read485 = 0;
    static unsigned char Data485[50];
    static unsigned char Counter485 = 0;
    static unsigned char Counter485_Temp = 0;
    static unsigned char DataSolved485[5];


    Read485 = read(tty485, &Data485, 50);
    printf("data485[0]= %d\n",Data485[0]);
    printf("data485[1]= %d\n",Data485[1]);
    printf("data485[2]= %d\n",Data485[2]);
    printf("data485[3]= %d\n",Data485[3]);
    printf("data485[4]= %d\n",Data485[4]);
    printf("data485[5]= %d\n",Data485[5]);
    printf("data485[6]= %d\n",Data485[6]);



    std::cout<<"read485 "<<Read485<<std::endl;
    if(Read485 > 0)
    {
        for(i=0;i<Read485;i++)
        {
            switch(Counter485)
            {
                case 0:
                    Counter485_Temp = 0;
                    if(Data485[i] == device_address)
                    {
                        Counter485++;
                        DataSolved485[Counter485_Temp] = Data485[i];
                        Counter485_Temp++;
                    }
                    break;
                case 1:
                    if(Data485[i] == 0x03)
                    {
                        Counter485++;
                        DataSolved485[Counter485_Temp] = Data485[i];
                        Counter485_Temp++;
                    }
                    else
                    {
                        Counter485 = 0;
                    }
                    break;
                case 2:
                    if(Data485[i] == 0x02)
                    {
                        Counter485++;
                        DataSolved485[Counter485_Temp] = Data485[i];
                        Counter485_Temp++;
                    }
                    else
                    {
                        Counter485 = 0;
                    }
                    break;
                case 3:
                    DataSolved485[Counter485_Temp] = Data485[i];
                    Counter485_Temp++;
                    if(Counter485_Temp == 5)
                    {
                        Counter485++;
                    }
                    break;
                case 4:
                    if((unsigned char)(CRC16(DataSolved485, 5)&0xff) == Data485[i])
                    {
                        Counter485++;
                    }
                    else
                    {
                        Counter485 = 0;
                    }
                    break;
                case 5:
                    if ((unsigned char)((CRC16(DataSolved485, 5)>>8)&0xff) == Data485[i])
                    {
//                        Flag_485 = 1;
//                        AlreadyIn485 = 1;
//                        TimeOut485 = 100;
                        for(j=0; j<5; j++)
                        {
                            DataUse485[j] = DataSolved485[j];
                        }
                    }
                    Counter485 = 0;
                    break;
                default:
                    Counter485 = 0;
                    break;
            }
        }
    }
}
